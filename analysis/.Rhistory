}
comps = c("0", "1", "2")
dll_xlang_surp_df = data.frame()
for (ps in psychometrics){
for(c in comps){
for(l in langs){
for(m in models) {
if(c != "bl") {
target_df = dll_raw_df %>% filter(psychometric == ps, names == c, lang == l, model == m)
baseline_df = dll_raw_df %>% filter(psychometric == ps, names == "bl", lang == l, model == m)
dll = baseline_df$logliks - target_df$logliks
dll = dll[!is.na(dll)]
ttest = perm.test(dll, num.sim = 1000)
dll_df = data.frame(comp = c, mean = mean(dll), upper = mean(dll) + (1.96 * std.error(dll)),
lower = mean(dll) - (1.96 * std.error(dll)), ttest_pval = ttest$p.value,
lang = l, psychometric = ps, model = m)
dll_xlang_surp_df = rbind(dll_xlang_surp_df, dll_df)
}
}
}
}
}
# Merge the dataframes
dll_surp_plotting_df = rbind(dll_xlang_surp_df, dll_agg_surp_df)
options(scipen=999)
dll_surp_plotting_df %>%
filter(model == "monolang") %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_text(aes(y = 0.08, label = sig, color = target), size = 3) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(psychometric~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()#,
#panel.border = element_rect(color = "grey", fill = NA, size = 0.5)
)
#ggsave("./images/l1/dll_surp.png", width = 9.2, height = 4)
regression_names = c("bl", "0", "1", "2")
# "bl" = baseline model with full surprisals, 0 = surprisal dropped at slot 0 i.e. the current word
dll_raw_df = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
df = read.csv(paste0("./cleaned_data/model/", lang, ".tsv")) %>%
filter(metric == "surp") %>%
rename(surp = value, prev_surp = prev_value, prev2_surp = prev2_value)
for (m in models) {
df_eval = df %>% filter(model == m)
for (psychometric in psychometrics) {
regression_forms = c(
paste0(psychometric, " ~ surp + prev_surp + prev2_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ surp + prev2_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ surp + prev_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len")
)
loglik_df = data.frame(names=regression_names, forms=regression_forms) %>%
mutate(logliks = map(regression_forms, model_cross_val, df=df_eval, d_var=psychometric, mixed_effects=F )) %>%
dplyr::select(-forms)
loglik_df = loglik_df %>% unnest(cols = c(logliks)) %>% mutate(lang = lang, psychometric = psychometric, model = m)
dll_raw_df = rbind(dll_raw_df, loglik_df)
}
}
}
comps = c("0", "1", "2")
dll_xlang_surp_df = data.frame()
for (ps in psychometrics){
for(c in comps){
for(l in langs){
for(m in models) {
if(c != "bl") {
target_df = dll_raw_df %>% filter(psychometric == ps, names == c, lang == l, model == m)
baseline_df = dll_raw_df %>% filter(psychometric == ps, names == "bl", lang == l, model == m)
dll = baseline_df$logliks - target_df$logliks
dll = dll[!is.na(dll)]
ttest = perm.test(dll, num.sim = 500)
dll_df = data.frame(comp = c, mean = mean(dll), upper = mean(dll) + (1.96 * std.error(dll)),
lower = mean(dll) - (1.96 * std.error(dll)), ttest_pval = ttest$p.value,
lang = l, psychometric = ps, model = m)
dll_xlang_surp_df = rbind(dll_xlang_surp_df, dll_df)
}
}
}
}
}
# Merge the dataframes
dll_surp_plotting_df = rbind(dll_xlang_surp_df, dll_agg_surp_df)
options(scipen=999)
dll_surp_plotting_df %>%
filter(model == "monolang") %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_text(aes(y = 0.08, label = sig, color = target), size = 3) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(psychometric~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()#,
#panel.border = element_rect(color = "grey", fill = NA, size = 0.5)
)
#ggsave("./images/l1/dll_surp.png", width = 9.2, height = 4)
# Merge the dataframes
dll_surp_plotting_df = rbind(dll_xlang_surp_df, dll_agg_surp_df)
options(scipen=999)
dll_surp_plotting_df %>%
filter(psychometric == "gaze_rt") %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_text(aes(y = 0.08, label = sig, color = target), size = 3) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()#,
#panel.border = element_rect(color = "grey", fill = NA, size = 0.5)
)
#ggsave("./images/l1/dll_surp.png", width = 9.2, height = 4)
regression_names = c("bl", "0", "1", "2")
# "bl" = baseline model with full surprisals, 0 = surprisal dropped at slot 0 i.e. the current word
dll_raw_df = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
df = read.csv(paste0("./cleaned_data/model/", lang, ".tsv")) %>%
filter(metric == "surp") %>%
rename(surp = value, prev_surp = prev_value, prev2_surp = prev2_value)
for (m in models) {
df_eval = df %>% filter(model == m)
for (psychometric in psychometrics) {
regression_forms = c(
paste0(psychometric, " ~ freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ prev_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ prev2_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len")
)
loglik_df = data.frame(names=regression_names, forms=regression_forms) %>%
mutate(logliks = map(regression_forms, model_cross_val, df=df_eval, d_var=psychometric, mixed_effects=F )) %>%
dplyr::select(-forms)
loglik_df = loglik_df %>% unnest(cols = c(logliks)) %>% mutate(lang = lang, psychometric = psychometric, model = m)
dll_raw_df = rbind(dll_raw_df, loglik_df)
}
}
}
comps = c("0", "1", "2")
dll_xlang_surp_df = data.frame()
for (ps in psychometrics){
for(c in comps){
for(l in langs){
for(m in models) {
if(c != "bl") {
target_df = dll_raw_df %>% filter(psychometric == ps, names == c, lang == l, model == m)
baseline_df = dll_raw_df %>% filter(psychometric == ps, names == "bl", lang == l, model == m)
dll = baseline_df$logliks - target_df$logliks
dll = dll[!is.na(dll)]
ttest = perm.test(dll, num.sim = 100)
dll_df = data.frame(comp = c, mean = mean(dll), upper = mean(dll) + (1.96 * std.error(dll)),
lower = mean(dll) - (1.96 * std.error(dll)), ttest_pval = ttest$p.value,
lang = l, psychometric = ps, model = m)
dll_xlang_surp_df = rbind(dll_xlang_surp_df, dll_df)
}
}
}
}
}
# Merge the dataframes
dll_surp_plotting_df = rbind(dll_xlang_surp_df, dll_agg_surp_df)
options(scipen=999)
dll_surp_plotting_df %>%
filter(psychometric == "gaze_rt") %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_text(aes(y = 0.08, label = sig, color = target), size = 3) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()#,
#panel.border = element_rect(color = "grey", fill = NA, size = 0.5)
)
#ggsave("./images/l1/dll_surp.png", width = 9.2, height = 4)
clean_data = function(data) {
df = data %>%
mutate(len = str_length(ia)) %>%
# Convert a word frequency from a proportion between 0 and 1 to the Zipf scale (see freq_to_zipf funciton in the word_freq documentation)
mutate(freq = log10(freq) + 9) %>%
group_by(trialid, itemid, uniform_id, model, metric) %>%
arrange(ianum) %>%
mutate(prev_value = lag(value), prev2_value = lag(prev_value),
prev_freq = lag(freq), prev2_freq = lag(prev_freq),
prev_len = lag(len), prev2_len = lag(prev_len)) %>%
ungroup() %>%
#78 rows where the unigram probabiltiy was 0 ("domestication")
filter(! is.infinite(freq),
! is.infinite(prev_freq),
! is.infinite(prev2_freq)) %>%
# dur = total reading time
mutate(dur = as.double(dur)) %>%
mutate(dur = if_else(is.na(dur), 0, dur)) %>% #Set the reading time for skipped words to 0
rename(total_rt = dur) %>%
# firstrun.dur = "gaze duration"
mutate(firstrun.dur = as.double(firstrun.dur)) %>%
mutate(firstrun.dur = if_else(is.na(firstrun.dur), 0, firstrun.dur)) %>% #Set the reading time for skipped words to 0
rename(gaze_rt = firstrun.dur) %>%
# firstfix.dur = "first fixation"
mutate(firstfix.dur = as.double(firstfix.dur)) %>%
mutate(firstfix.dur = if_else(is.na(firstfix.dur), 0, firstfix.dur)) %>% #Set the reading time for skipped words to 0
rename(firstfix_rt = firstfix.dur) %>%
dplyr::select(total_rt, gaze_rt, firstfix_rt,
ia, itemid, ianum, uniform_id,
model, metric, value, prev_value, prev2_value,
len, prev_len, prev2_len,
freq, prev2_freq, prev_freq) %>%
drop_na() %>%
# Group by each individual word and take across-participant averages
group_by(itemid, ianum, ia, model, metric, value, prev_value, prev2_value,len, prev_len, prev2_len, freq, prev_freq, prev2_freq) %>%
summarise(total_rt = mean(total_rt),
gaze_rt = mean(gaze_rt),
firstfix_rt = mean(firstfix_rt)) %>%
ungroup()
return(df)
}
#langs = c("du", "en", "fi", "ge", "gr", "he", "it", "sp", "ko", "tr", "ru")
langs = c("du", "en", "fi", "gr", "he", "it", "sp", "ko", "tr", "ru")
models = c("mgpt_short", "mgpt_long", "monoling")
for (lang in langs) {
# HUMAN RT DATA
rt_data = read.csv( paste("../data/langs_l1/", lang, ".csv", sep=""), header = T, sep = ",") %>%
dplyr::select(-X, -subid, -trial)
# MONOLINGUAL DATA
monolang_df = read.csv(paste0("../data/results_l1/monolingual_30m/",lang,"_preds.tsv"), header = T, sep = "\t") %>%
rename(trialid = sample_id, monolang_surp = score, ianum = word_id) %>%
mutate(ianum = ianum + 1, trialid = trialid + 1) %>%
dplyr::select(-X, -word)
# MGPT SHORT CONTEXT DATA
mgpt_short_df = read.csv(paste("../data/results_l1/short_context/mgpt_",lang,"_preds.csv", sep=""), header = T, sep = "\t") %>%
mutate(ia_idx = ianum) %>%
rename(trialid = sentnum, sentnum = trialid )%>%
group_by(trialid) %>%
arrange(sentnum, ia_idx) %>%
mutate(ianum = 1:n()) %>%
ungroup() %>%
dplyr::select(-sentnum, -ia_idx) %>%
rename(mgptShort_surp = surp, mgptShort_ent = ent) %>%
dplyr::select(-X, -freq, -ia)
# MGPT LONG CONTEXT DATA
mgpt_long_df = read.csv(paste("../data/results_l1/long_context/mgpt_",lang,"_long_preds.csv", sep=""), header = T, sep = "\t") %>%
mutate(ianum = ianum + 1) %>%
rename(mgptLong_surp = surp, mgptLong_ent = ent ) %>%
dplyr::select(-X, -ia)
merged_df = merge(rt_data, mgpt_long_df, by = c("trialid", "ianum") )
merged_df = merge(merged_df, mgpt_short_df, by = c("trialid", "ianum") )
merged_df = merge(merged_df, monolang_df, by = c("trialid", "ianum") )
merged_df = merged_df %>%
gather("label", "value", 41:45) %>%
separate(label, sep = "_", into = c("model", "metric")) %>%
clean_data(.)
write.csv(merged_df, paste0("./cleaned_data/model/", lang, ".tsv"))
}
lang = "en"
rt_data = read.csv( paste("../data/langs_l1/", lang, ".csv", sep=""), header = T, sep = ",") %>%
dplyr::select(-X, -subid, -trial)
mgpt_long_df = read.csv(paste("../data/results_l1/long_context/mgpt_",lang,"_long_preds.csv", sep=""), header = T, sep = "\t") %>%
mutate(ianum = ianum + 1)
merged_df_long =  merge(rt_data, pred_data_long_context, by = c("trialid", "ianum")) %>%
filter(ia.x == ia.y) %>%
clean_data(.) %>%
mutate(context = "long")
clean_data = function(data) {
df = data %>%
mutate(len = str_length(ia)) %>%
# Convert a word frequency from a proportion between 0 and 1 to the Zipf scale (see freq_to_zipf funciton in the word_freq documentation)
mutate(freq = log10(freq) + 9) %>%
group_by(trialid, itemid, uniform_id, model, metric) %>%
arrange(ianum) %>%
mutate(prev_value = lag(value), prev2_value = lag(prev_value),
prev_freq = lag(freq), prev2_freq = lag(prev_freq),
prev_len = lag(len), prev2_len = lag(prev_len)) %>%
ungroup() %>%
#78 rows where the unigram probabiltiy was 0 ("domestication")
filter(! is.infinite(freq),
! is.infinite(prev_freq),
! is.infinite(prev2_freq)) %>%
# dur = total reading time
mutate(dur = as.double(dur)) %>%
mutate(dur = if_else(is.na(dur), 0, dur)) %>% #Set the reading time for skipped words to 0
rename(total_rt = dur) %>%
# firstrun.dur = "gaze duration"
mutate(firstrun.dur = as.double(firstrun.dur)) %>%
mutate(firstrun.dur = if_else(is.na(firstrun.dur), 0, firstrun.dur)) %>% #Set the reading time for skipped words to 0
rename(gaze_rt = firstrun.dur) %>%
# firstfix.dur = "first fixation"
mutate(firstfix.dur = as.double(firstfix.dur)) %>%
mutate(firstfix.dur = if_else(is.na(firstfix.dur), 0, firstfix.dur)) %>% #Set the reading time for skipped words to 0
rename(firstfix_rt = firstfix.dur) %>%
dplyr::select(total_rt, gaze_rt, firstfix_rt,
ia, itemid, ianum, uniform_id,
model, metric, value, prev_value, prev2_value,
len, prev_len, prev2_len,
freq, prev2_freq, prev_freq) %>%
drop_na() %>%
# Group by each individual word and take across-participant averages
group_by(itemid, ianum, ia, model, metric, value, prev_value, prev2_value,len, prev_len, prev2_len, freq, prev_freq, prev2_freq) %>%
summarise(total_rt = mean(total_rt),
gaze_rt = mean(gaze_rt),
firstfix_rt = mean(firstfix_rt)) %>%
ungroup()
return(df)
}
#langs = c("du", "en", "fi", "ge", "gr", "he", "it", "sp", "ko", "tr", "ru")
langs = c("du", "en", "fi", "gr", "he", "it", "sp", "ko", "tr", "ru")
models = c("mgpt_short", "mgpt_long", "monoling")
for (lang in langs) {
# HUMAN RT DATA
rt_data = read.csv( paste("../data/langs_l1/", lang, ".csv", sep=""), header = T, sep = ",") %>%
dplyr::select(-X, -subid, -trial)
# MONOLINGUAL DATA
monolang_df = read.csv(paste0("../data/results_l1/monolingual_30m/",lang,"_preds.tsv"), header = T, sep = "\t") %>%
rename(trialid = sample_id, monolang_surp = score, ianum = word_id) %>%
mutate(ianum = ianum + 1, trialid = trialid + 1) %>%
dplyr::select(-X, -word)
# MGPT SHORT CONTEXT DATA
mgpt_short_df = read.csv(paste("../data/results_l1/short_context/mgpt_",lang,"_preds.csv", sep=""), header = T, sep = "\t") %>%
mutate(ia_idx = ianum) %>%
rename(trialid = sentnum, sentnum = trialid )%>%
group_by(trialid) %>%
arrange(sentnum, ia_idx) %>%
mutate(ianum = 1:n()) %>%
ungroup() %>%
dplyr::select(-sentnum, -ia_idx) %>%
rename(mgptShort_surp = surp, mgptShort_ent = ent) %>%
dplyr::select(-X, -freq, -ia)
# MGPT LONG CONTEXT DATA
mgpt_long_df = read.csv(paste("../data/results_l1/long_context/mgpt_",lang,"_long_preds.csv", sep=""), header = T, sep = "\t") %>%
mutate(ianum = ianum + 1) %>%
rename(mgptLong_surp = surp, mgptLong_ent = ent ) %>%
dplyr::select(-X, -ia)
merged_df = merge(rt_data, mgpt_long_df, by = c("trialid", "ianum") )
merged_df = merge(merged_df, mgpt_short_df, by = c("trialid", "ianum") )
merged_df = merge(merged_df, monolang_df, by = c("trialid", "ianum") )
merged_df = merged_df %>%
gather("label", "value", 41:45) %>%
separate(label, sep = "_", into = c("model", "metric")) %>%
clean_data(.)
write.csv(merged_df, paste0("./cleaned_data/model/", lang, ".tsv"))
}
set.seed(444)
#langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
langs = c("du", "en", "fi", "gr", "he", "it", "sp", "ko", "tr", "ru")
psychometrics = c("total_rt", "gaze_rt", "firstfix_rt")
models = c("mgptShort", "mgptLong", "monolang")
comps = c("bl", "0", "1", "2")
model_cross_val = function(form, df, d_var, mixed_effects, num_folds=10){
folds <- cut(seq(1,nrow(df)),breaks=num_folds,labels=FALSE)
estimates <- c()
models <- c()
for(i in 1:num_folds){
testIndexes = which(folds==i,arr.ind=TRUE)
testData = df[testIndexes,]
trainData = df[-testIndexes,]
if(mixed_effects){
model = lmer(as.formula(form), data = trainData)
} else {
model = lm(as.formula(form), data = trainData)
}
stdev = sigma(model)
densities <- log(dnorm(testData[[d_var]],
mean=predict(model, newdata=testData),
sd=stdev))
estimates <- c(estimates, densities)
}
return(estimates)
}
regression_names = c("bl", "0", "1", "2")
# "bl" = baseline model with full surprisals, 0 = surprisal dropped at slot 0 i.e. the current word
dll_raw_df = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
df = read.csv(paste0("./cleaned_data/model/", lang, ".tsv")) %>%
filter(metric == "surp") %>%
rename(surp = value, prev_surp = prev_value, prev2_surp = prev2_value)
for (m in models) {
df_eval = df %>% filter(model == m)
for (psychometric in psychometrics) {
regression_forms = c(
paste0(psychometric, " ~ surp + prev_surp + prev2_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ prev_surp + prev2_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ surp + prev2_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len"),
paste0(psychometric, " ~ surp + prev_surp + freq*len + prev_freq*prev_len + prev2_freq*prev2_len")
)
loglik_df = data.frame(names=regression_names, forms=regression_forms) %>%
mutate(logliks = map(regression_forms, model_cross_val, df=df_eval, d_var=psychometric, mixed_effects=F )) %>%
dplyr::select(-forms)
loglik_df = loglik_df %>% unnest(cols = c(logliks)) %>% mutate(lang = lang, psychometric = psychometric, model = m)
dll_raw_df = rbind(dll_raw_df, loglik_df)
}
}
}
comps = c("0", "1", "2")
dll_xlang_surp_df = data.frame()
for (ps in psychometrics){
for(c in comps){
for(l in langs){
for(m in models) {
if(c != "bl") {
target_df = dll_raw_df %>% filter(psychometric == ps, names == c, lang == l, model == m)
baseline_df = dll_raw_df %>% filter(psychometric == ps, names == "bl", lang == l, model == m)
dll = baseline_df$logliks - target_df$logliks
dll = dll[!is.na(dll)]
ttest = perm.test(dll, num.sim = 100)
dll_df = data.frame(comp = c, mean = mean(dll), upper = mean(dll) + (1.96 * std.error(dll)),
lower = mean(dll) - (1.96 * std.error(dll)), ttest_pval = ttest$p.value,
lang = l, psychometric = ps, model = m)
dll_xlang_surp_df = rbind(dll_xlang_surp_df, dll_df)
}
}
}
}
}
# Merge the dataframes
dll_surp_plotting_df = rbind(dll_xlang_surp_df, dll_agg_surp_df)
options(scipen=999)
dll_surp_plotting_df %>%
filter(psychometric == "gaze_rt") %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_text(aes(y = 0.08, label = sig, color = target), size = 3) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()#,
#panel.border = element_rect(color = "grey", fill = NA, size = 0.5)
)
#ggsave("./images/l1/dll_surp.png", width = 9.2, height = 4)
