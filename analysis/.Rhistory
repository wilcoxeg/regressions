legend.position = "none",
panel.grid.minor = element_blank()
)
ggsave("./images/meco_results.pdf", device="pdf", width = 8, height = 5)
library(ggtext)
plot_df %>%
mutate(lang = factor(lang, levels = c("de", "es", "fi", "it", "tr", "ru"),
labels = c("German", "Spanish", "Finnish", "Italian", "Turkish", "Russian"))) %>%
mutate(sig = pval_func(pval),
npmi_pval = pval_func(npmi_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill = theory)) +
#geom_point(size = 2) +
geom_bar(stat="identity", alpha=0.75, color = "black", size = 0.2) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npmi_pval, y = y_max + y_step * 1.5, x = 4.5), size = 3, angle = 0, color = "gray", alpha=0.2) +
facet_wrap(.~lang, nrow=2) +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank()
)
ggsave("./images/meco_results.pdf", device="pdf", width = 8, height = 5)
library(ggtext)
plot_df %>%
mutate(lang = factor(lang, levels = c("de", "es", "fi", "it", "tr", "ru"),
labels = c("German", "Spanish", "Finnish", "Italian", "Turkish", "Russian"))) %>%
mutate(sig = pval_func(pval),
npmi_pval = pval_func(npmi_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill = theory)) +
#geom_point(size = 2) +
geom_bar(stat="identity", alpha=0.75, color = "black", size = 0.3) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npmi_pval, y = y_max + y_step * 1.5, x = 4.5), size = 3, angle = 0, color = "gray", alpha=0.2) +
facet_wrap(.~lang, nrow=2) +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank()
)
ggsave("./images/meco_results.pdf", device="pdf", width = 8, height = 5)
library(ggtext)
plot_df %>%
mutate(lang = factor(lang, levels = c("de", "es", "fi", "it", "tr", "ru"),
labels = c("German", "Spanish", "Finnish", "Italian", "Turkish", "Russian"))) %>%
mutate(sig = pval_func(pval),
npmi_pval = pval_func(npmi_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill = theory)) +
#geom_point(size = 2) +
geom_bar(stat="identity", alpha=0.75, color = "black", size = 0.3) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0, color = "black", size = 0.3) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npmi_pval, y = y_max + y_step * 1.5, x = 4.5), size = 3, angle = 0, color = "gray", alpha=0.2) +
facet_wrap(.~lang, nrow=2) +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank()
)
ggsave("./images/meco_results.pdf", device="pdf", width = 8, height = 5)
library(ggtext)
plot_df %>%
mutate(lang = factor(lang, levels = c("de", "es", "fi", "it", "tr", "ru"),
labels = c("German", "Spanish", "Finnish", "Italian", "Turkish", "Russian"))) %>%
mutate(sig = pval_func(pval),
npmi_pval = pval_func(npmi_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill = theory)) +
#geom_point(size = 2) +
geom_bar(stat="identity", alpha=0.75, color = "black", size = 0.1) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0, color = "black", size = 0.1) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npmi_pval, y = y_max + y_step * 1.5, x = 4.5), size = 3, angle = 0, color = "gray", alpha=0.2) +
facet_wrap(.~lang, nrow=2) +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank()
)
ggsave("./images/meco_results.pdf", device="pdf", width = 8, height = 5)
library(ggtext)
plot_df %>%
mutate(lang = factor(lang, levels = c("de", "es", "fi", "it", "tr", "ru"),
labels = c("German", "Spanish", "Finnish", "Italian", "Turkish", "Russian"))) %>%
mutate(sig = pval_func(pval),
npmi_pval = pval_func(npmi_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill = theory)) +
#geom_point(size = 2) +
geom_bar(stat="identity", alpha=0.75, color = "black", size = 0.1) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0, color = "black", size = 0.3) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npmi_pval, y = y_max + y_step * 1.5, x = 4.5), size = 3, angle = 0, color = "gray", alpha=0.2) +
facet_wrap(.~lang, nrow=2) +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank()
)
ggsave("./images/meco_results.pdf", device="pdf", width = 8, height = 5)
library(ggtext)
plot_df %>%
mutate(lang = factor(lang, levels = c("de", "es", "fi", "it", "tr", "ru"),
labels = c("German", "Spanish", "Finnish", "Italian", "Turkish", "Russian"))) %>%
mutate(sig = pval_func(pval),
npmi_pval = pval_func(npmi_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill = theory)) +
#geom_point(size = 2) +
geom_bar(stat="identity", alpha=0.75, color = "black", size = 0.1, width = 0.9) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0, color = "black", size = 0.3) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npmi_pval, y = y_max + y_step * 1.5, x = 4.5), size = 3, angle = 0, color = "gray", alpha=0.2) +
facet_wrap(.~lang, nrow=2) +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank()
)
ggsave("./images/meco_results.pdf", device="pdf", width = 8, height = 5)
library(ggtext)
plot_df %>%
mutate(lang = factor(lang, levels = c("de", "es", "fi", "it", "tr", "ru"),
labels = c("German", "Spanish", "Finnish", "Italian", "Turkish", "Russian"))) %>%
mutate(sig = pval_func(pval),
npmi_pval = pval_func(npmi_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill = theory)) +
#geom_point(size = 2) +
geom_bar(stat="identity", alpha=0.75, color = "black", size = 0.1, width = 0.8) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0, color = "black", size = 0.3) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npmi_pval, y = y_max + y_step * 1.5, x = 4.5), size = 3, angle = 0, color = "gray", alpha=0.2) +
facet_wrap(.~lang, nrow=2) +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 0.5),
legend.position = "none",
panel.grid.minor = element_blank()
)
ggsave("./images/meco_results.pdf", device="pdf", width = 8, height = 5)
write.csv(plot_df, "../../../research/regressions/ancillary_data/meco_plot_df.csv")
plot_df = read.csv("../../../research/regressions/ancillary_data/en_plot_df.csv")
plot_df %>%
mutate(corpus = factor(corpus, levels = c("dundee", "provo", "ucl"),
labels = c("Dundee", "Provo", "UCL"))) %>%
mutate(sig = pval_func(pval),
npi_pval = pval_func(npmi_comp_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill=theory)) +
geom_bar(stat="identity", alpha = 0.75, color = "black", size = 0.1, width = 0.8) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0, color = "black", size = 0.3) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
geom_text(aes(label = " ", color = theory, y = y_max + y_step * 5), size = 3, angle = 0) +
geom_text(aes(label = " ", color = theory, y = 0 - y_step * 1), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npi_pval, y = y_max + y_step * 1.5), size = 3,  x = 4.5, angle = 0, color = "gray", alpha=0.4) +
#geom_hline(yintercept = 0, color = "gray", size = 0.1) +
facet_grid(corpus~model, scales = "free_y") +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
#ggtitle("Regression Count Between Words") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(),
legend.position = "none"
)
ggsave("./images/en_results.pdf", device="pdf", width = 8, height = 4.5)
plot_df = read.csv("../../../research/regressions/ancillary_data/en_plot_df.csv") %>%
mutate(theory = factor(theory, levels = c("Reactivation", "Reanalysis", "Ensemble"))) %>%
mutate(tag = factor(tag, levels = c("PMI", "PPMI", "NPMI", "|PMI|", "PPMI+NPMI",  "E[PMI]", "E[PPMI]", "E[NPMI]", "|E[PMI]|", "E[PPMI]+E[NPMI]", "All Predictors")))
plot_df %>%
mutate(corpus = factor(corpus, levels = c("dundee", "provo", "ucl"),
labels = c("Dundee", "Provo", "UCL"))) %>%
mutate(sig = pval_func(pval),
npi_pval = pval_func(npmi_comp_pval)) %>%
ggplot(aes(x = tag, y=m, color = theory, fill=theory)) +
geom_bar(stat="identity", alpha = 0.75, color = "black", size = 0.1, width = 0.8) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0, color = "black", size = 0.3) +
geom_text(aes(label = sig, color = theory, y = y_max + y_step * 4), size = 3, angle = 0) +
geom_text(aes(label = " ", color = theory, y = y_max + y_step * 5), size = 3, angle = 0) +
geom_text(aes(label = " ", color = theory, y = 0 - y_step * 1), size = 3, angle = 0) +
# NPMI vs. E[NPMI] Comparison plotting
geom_segment(aes(y = y_max + 1 * y_step, yend = y_max + 1 * y_step), size =0.5, x = 1.95, xend = 6.05, color="gray", alpha=0.4) +
geom_text(aes(label = npi_pval, y = y_max + y_step * 1.5), size = 3,  x = 4.5, angle = 0, color = "gray", alpha=0.4) +
#geom_hline(yintercept = 0, color = "gray", size = 0.1) +
facet_grid(corpus~model, scales = "free_y") +
ylab("Delta LogLik") +
labs(color="") +
scale_color_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
scale_fill_manual(values=c("#39ccbd", "#3991cc", "#aaaaaa")) +
#ggtitle("Regression Count Between Words") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
axis.title.x = element_blank(),
axis.text.y = element_text(),
legend.position = "none"
)
ggsave("./images/en_results.pdf", device="pdf", width = 8, height = 4.5)
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
shhh(library(Hmisc))
shhh(library(jmuOutlier))
shhh(library(pscl))
shhh(library(broom))
shhh(library(broom.mixed))
#options(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin/")
#library(jglmm)
#jglmm_setup()
theme_set(theme_bw())
options(digits=4)
options(dplyr.summarise.inform = FALSE)
set.seed(444)
options(scipen=999)
corpora = c("provo", "ucl", "dundee")
models = c("BERT-allRC", "BERT-maskRC", "BERT-dropRC")
dundee_pairwise_df = read.csv("../data/harmonized_results/dundee_pairwise_stats_df.csv")
dundee_sacc_df = read.csv("../data/harmonized_results/dundee_saccades_df.csv")
dundee_agg_regressions = dundee_sacc_df %>%
mutate(next_ia_idx = as.numeric(next_ia_idx), prev_ia_idx = as.numeric(prev_ia_idx)) %>%
drop_na() %>%
filter(next_ia_idx < curr_ia_idx) %>%
group_by(text_id, sent_id, curr_ia_idx, next_ia_idx) %>%
summarise(n_regressions = n(), n_subjs = length(unique(subj))) %>%
ungroup() %>%
rename(
trigger_idx = curr_ia_idx,
target_idx = next_ia_idx
)
dundee_df = dundee_pairwise_df %>%
merge(dundee_agg_regressions, all= T, by=c("text_id", "sent_id", "trigger_idx", "target_idx")) %>%
mutate(corpus = "dundee")%>%
mutate(ppmi = if_else(pmi > 0, pmi, 0),
npmi = if_else(pmi < 0, pmi, 0)) %>%
rename(model = mask_type) %>%
mutate(model = case_when(model == "none" ~ "BERT-allRC", model == "mask" ~ "BERT-maskRC", model == "truncate" ~ "BERT-dropRC"))
# Currently, this includes information for when regressions happen in text IDs 4-n. Drop this below
table(dundee_df$text_id)
dundee_agg_regressions
dundee_df
dundee_agg_regressions
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
shhh(library(Hmisc))
shhh(library(jmuOutlier))
shhh(library(pscl))
shhh(library(broom))
shhh(library(broom.mixed))
library(performance)
theme_set(theme_bw())
options(digits=4)
options(dplyr.summarise.inform = FALSE)
set.seed(444)
options(scipen=999)
corpora = c("provo", "ucl")
windows = c("w0", "w1_mean", "w1_max") #How many words on either side of the target do we integrate into the analysis?
models = c("BERT-allRC", "BERT-maskRC", "BERT-dropRC")
provo_pairwise_df = read.csv("../data/harmonized_results/provo_pairwise_stats_df.csv")
provo_sacc_df = read.csv("../data/harmonized_results/provo_saccades_df.csv")
provo_agg_regressions = provo_sacc_df %>%
mutate(next_ia_idx = as.numeric(next_ia_idx), prev_ia_idx = as.numeric(prev_ia_idx)) %>%
drop_na() %>%
filter(next_ia_idx < curr_ia_idx) %>%
group_by(text_id, sent_id, curr_ia_idx, next_ia_idx) %>%
summarise(n_regressions = n(), n_subjs = length(unique(subj))) %>%
ungroup() %>%
dplyr::rename(
trigger_idx = curr_ia_idx,
target_idx = next_ia_idx
)
provo_df = provo_pairwise_df %>%
merge(provo_agg_regressions, all= T, by=c("text_id", "sent_id", "trigger_idx", "target_idx")) %>%
mutate(corpus = "provo") %>%
dplyr::rename(model = mask_type) %>%
mutate(model = case_when(model == "none" ~ "BERT-allRC", model == "mask" ~ "BERT-maskRC", model == "truncate" ~ "BERT-dropRC")) %>%
# Below, change the sign of NPMI so that it's positive (alredy done for e_npmi)
# This is just so that coefficients between the two can be interpreted similarly in regressions
mutate(npmi = -1 * npmi)
provo_target_lead1_df = provo_df %>% mutate(target_idx = target_idx + 1) %>% dplyr::select(target, text_id, sent_id, trigger_idx, target_idx, model, target_len, target_freq, target_surp,
pmi, ppmi, npmi, e_pmi, e_ppmi, e_npmi)
provo_target_lead2_df = provo_df %>% mutate(target_idx = target_idx + 2) %>% dplyr::select(target, text_id, sent_id, trigger_idx, target_idx, model, target_len, target_freq, target_surp,
pmi, ppmi, npmi, e_pmi, e_ppmi, e_npmi)
provo_target_lag1_df = provo_df %>% mutate(target_idx = target_idx - 1) %>% dplyr::select(target, text_id, sent_id, trigger_idx, target_idx, model, target_len, target_freq, target_surp,
pmi, ppmi, npmi, e_pmi, e_ppmi, e_npmi)
provo_target_lag2_df = provo_df %>% mutate(target_idx = target_idx - 2) %>% dplyr::select(target, text_id, sent_id, trigger_idx, target_idx, model, target_len, target_freq, target_surp,
pmi, ppmi, npmi, e_pmi, e_ppmi, e_npmi)
provo_df = merge(provo_df, provo_target_lead1_df, all = T, by = c("text_id", "sent_id", "trigger_idx", "target_idx", "model"), suffixes = c("", ".+1"))
provo_df = merge(provo_df, provo_target_lead2_df, all = T, by = c("text_id", "sent_id", "trigger_idx", "target_idx", "model"), suffixes = c("", ".+2"))
provo_df = merge(provo_df, provo_target_lag1_df, all = T, by = c("text_id", "sent_id", "trigger_idx", "target_idx", "model"), suffixes = c("", ".-1"))
provo_df = merge(provo_df, provo_target_lag2_df, all = T, by = c("text_id", "sent_id", "trigger_idx", "target_idx", "model"), suffixes = c("", ".-2")) %>%
filter(! is.na(trigger)) %>% filter(target_idx >= 1)
cols2keep = c("text_id", "sent_id", "trigger_idx", "target_idx", "trigger", "trigger_len", "trigger_freq", "trigger_surp", "target", "target_len", "target_freq", "target_surp","pmi", "ppmi", "npmi", "e_pmi", "e_ppmi", "e_npmi", "n_regressions", "corpus", "model", "window", "is_multitok")
provo_0_df = provo_df %>%
mutate(window = "w0") %>%
dplyr::select(cols2keep)
provo_w1_mean_df = provo_df %>%
mutate(window = "w1_mean") %>%
mutate(
target_mean = rowMeans(dplyr::select(.,c("target_len", "target_len.+1", "target_len.-1")), na.rm=TRUE),
target_freq = rowMeans(dplyr::select(.,c("target_freq", "target_freq.+1", "target_freq.-1")), na.rm=TRUE),
target_surp = rowMeans(dplyr::select(.,c("target_surp", "target_surp.+1", "target_surp.-1")), na.rm=TRUE),
pmi = rowMeans(dplyr::select(.,c("pmi", "pmi.+1", "pmi.-1")), na.rm=TRUE),
ppmi = rowMeans(dplyr::select(.,c("ppmi", "ppmi.+1", "ppmi.-1")), na.rm=TRUE),
npmi = rowMeans(dplyr::select(.,c("npmi", "npmi.+1", "npmi.-1")), na.rm=TRUE),
e_pmi = rowMeans(dplyr::select(.,c("e_pmi", "e_pmi.+1", "e_pmi.-1")), na.rm=TRUE),
e_ppmi = rowMeans(dplyr::select(.,c("e_ppmi", "e_ppmi.+1", "e_ppmi.-1")), na.rm=TRUE),
e_npmi = pmax(e_npmi, `e_npmi.+1`, `e_npmi.-1`, na.rm=TRUE),
) %>%
dplyr::select(cols2keep)
provo_w1_max_df = provo_df %>%
mutate(window = "w1_max") %>%
mutate(
target_len = pmax(target_len, `target_len.+1`, `target_len.-1`, na.rm=TRUE),
target_freq = pmax(target_freq, `target_freq.+1`, `target_freq.-1`, na.rm=TRUE),
target_surp = pmax(target_freq, `target_surp.+1`, `target_surp.-1`, na.rm=TRUE),
# PMI -- We get the max absolute value of PMI. We also want to keep this signed (unlike PPMI and NPMI)
abs_max_pmi = abs(pmax(pmi, `pmi.+1`, `pmi.-1`, na.rm=TRUE)),
abs_min_pmi = abs(pmin(pmi, `pmi.+1`, `pmi.-1`, na.rm=TRUE)),
pmi = if_else(abs_max_pmi > abs_min_pmi, abs_max_pmi, -1 * abs_min_pmi),
ppmi = pmax(ppmi, `ppmi.+1`, `ppmi.-1`, na.rm=TRUE),
npmi = pmax(npmi, `npmi.+1`, `npmi.-1`, na.rm=TRUE),
# PMI -- We get the max absolute value of PMI. We also want to keep this signed (unlike PPMI and NPMI)
abs_max_e_pmi = abs(pmax(e_pmi, `e_pmi.+1`, `e_pmi.-1`, na.rm=TRUE)),
abs_min_e_pmi = abs(pmin(e_pmi, `e_pmi.+1`, `e_pmi.-1`, na.rm=TRUE)),
e_pmi = if_else(abs_max_e_pmi > abs_min_e_pmi, abs_max_e_pmi, -1 * abs_min_e_pmi),
e_ppmi = pmax(e_ppmi, `e_ppmi.+1`, `e_ppmi.-1`, na.rm=TRUE),
e_npmi = pmax(e_npmi, `e_npmi.+1`, `e_npmi.-1`, na.rm=TRUE),
) %>%
dplyr::select(cols2keep)
provo_df = rbind(provo_0_df, provo_w1_mean_df)
provo_df = rbind(provo_df, provo_w1_max_df) %>%
arrange(text_id, sent_id, trigger_idx, target_idx)
provo_df
provo_df
provo_df %>%
filter(model == "BERT-allRC", window == "w0")
provo_agg_regressions
provo_df %>%
filter(model == "BERT-allRC", window == "w0")
ucl_pairwise_df = read.csv("../data/harmonized_results/ucl_pairwise_stats_df.csv")
ucl_sacc_df = read.csv("../data/harmonized_results/ucl_saccades_df.csv")
ucl_agg_regressions = ucl_sacc_df %>%
mutate(next_ia_idx = as.numeric(next_ia_idx), prev_ia_idx = as.numeric(prev_ia_idx)) %>%
drop_na() %>%
filter(next_ia_idx < curr_ia_idx) %>%
group_by(text_id, sent_id, curr_ia_idx, next_ia_idx) %>%
summarise(n_regressions = n(), n_subjs = length(unique(subj))) %>%
ungroup() %>%
dplyr::rename(
trigger_idx = curr_ia_idx,
target_idx = next_ia_idx
)
ucl_df = ucl_pairwise_df %>%
merge(ucl_agg_regressions, all= T, by=c("text_id", "sent_id", "trigger_idx", "target_idx")) %>%
mutate(corpus = "ucl")%>%
mutate(ppmi = if_else(pmi > 0, pmi, 0),
npmi = if_else(pmi < 0, pmi, 0)) %>%
dplyr::rename(model = mask_type) %>%
mutate(model = case_when(model == "none" ~ "BERT-allRC", model == "mask" ~ "BERT-maskRC", model == "truncate" ~ "BERT-dropRC"))
ucl_target_lead1_df = ucl_df %>% mutate(target_idx = target_idx + 1) %>% dplyr::select(target, text_id, sent_id, trigger_idx, target_idx, model, target_len, target_freq, target_surp,
pmi, ppmi, npmi, e_pmi, e_ppmi, e_npmi)
ucl_target_lead2_df = ucl_df %>% mutate(target_idx = target_idx + 2) %>% dplyr::select(target, text_id, sent_id, trigger_idx, target_idx, model, target_len, target_freq, target_surp,
pmi, ppmi, npmi, e_pmi, e_ppmi, e_npmi)
ucl_target_lag1_df = ucl_df %>% mutate(target_idx = target_idx - 1) %>% dplyr::select(target, text_id, sent_id, trigger_idx, target_idx, model, target_len, target_freq, target_surp,
pmi, ppmi, npmi, e_pmi, e_ppmi, e_npmi)
ucl_target_lag2_df = ucl_df %>% mutate(target_idx = target_idx - 2) %>% dplyr::select(target, text_id, sent_id, trigger_idx, target_idx, model, target_len, target_freq, target_surp,
pmi, ppmi, npmi, e_pmi, e_ppmi, e_npmi)
ucl_df = merge(ucl_df, ucl_target_lead1_df, all = T, by = c("text_id", "sent_id", "trigger_idx", "target_idx", "model"), suffixes = c("", ".+1"))
ucl_df = merge(ucl_df, ucl_target_lead2_df, all = T, by = c("text_id", "sent_id", "trigger_idx", "target_idx", "model"), suffixes = c("", ".+2"))
ucl_df = merge(ucl_df, ucl_target_lag1_df, all = T, by = c("text_id", "sent_id", "trigger_idx", "target_idx", "model"), suffixes = c("", ".-1"))
ucl_df = merge(ucl_df, ucl_target_lag2_df, all = T, by = c("text_id", "sent_id", "trigger_idx", "target_idx", "model"), suffixes = c("", ".-2")) %>%
filter(! is.na(trigger)) %>% filter(target_idx >= 1)
cols2keep = c("text_id", "sent_id", "trigger_idx", "target_idx", "trigger", "trigger_len", "trigger_freq", "trigger_surp", "target", "target_len", "target_freq", "target_surp","pmi", "ppmi", "npmi", "e_pmi", "e_ppmi", "e_npmi", "n_regressions", "corpus", "model", "window", "is_multitok")
ucl_0_df = ucl_df %>%
mutate(window = "w0") %>%
dplyr::select(cols2keep)
ucl_w1_mean_df = ucl_df %>%
mutate(window = "w1_mean") %>%
mutate(
target_mean = rowMeans(dplyr::select(.,c("target_len", "target_len.+1", "target_len.-1")), na.rm=TRUE),
target_freq = rowMeans(dplyr::select(.,c("target_freq", "target_freq.+1", "target_freq.-1")), na.rm=TRUE),
target_surp = rowMeans(dplyr::select(.,c("target_surp", "target_surp.+1", "target_surp.-1")), na.rm=TRUE),
pmi = rowMeans(dplyr::select(.,c("pmi", "pmi.+1", "pmi.-1")), na.rm=TRUE),
ppmi = rowMeans(dplyr::select(.,c("ppmi", "ppmi.+1", "ppmi.-1")), na.rm=TRUE),
npmi = rowMeans(dplyr::select(.,c("npmi", "npmi.+1", "npmi.-1")), na.rm=TRUE),
e_pmi = rowMeans(dplyr::select(.,c("e_pmi", "e_pmi.+1", "e_pmi.-1")), na.rm=TRUE),
e_ppmi = rowMeans(dplyr::select(.,c("e_ppmi", "e_ppmi.+1", "e_ppmi.-1")), na.rm=TRUE),
e_npmi = pmax(e_npmi, `e_npmi.+1`, `e_npmi.-1`, na.rm=TRUE),
) %>%
dplyr::select(cols2keep)
ucl_w1_max_df = ucl_df %>%
mutate(window = "w1_max") %>%
mutate(
target_len = pmax(target_len, `target_len.+1`, `target_len.-1`, na.rm=TRUE),
target_freq = pmax(target_freq, `target_freq.+1`, `target_freq.-1`, na.rm=TRUE),
target_surp = pmax(target_freq, `target_surp.+1`, `target_surp.-1`, na.rm=TRUE),
# PMI -- We get the max absolute value of PMI. We also want to keep this signed (unlike PPMI and NPMI)
abs_max_pmi = abs(pmax(pmi, `pmi.+1`, `pmi.-1`, na.rm=TRUE)),
abs_min_pmi = abs(pmin(pmi, `pmi.+1`, `pmi.-1`, na.rm=TRUE)),
pmi = if_else(abs_max_pmi > abs_min_pmi, abs_max_pmi, -1 * abs_min_pmi),
ppmi = pmax(ppmi, `ppmi.+1`, `ppmi.-1`, na.rm=TRUE),
npmi = pmax(npmi, `npmi.+1`, `npmi.-1`, na.rm=TRUE),
# PMI -- We get the max absolute value of PMI. We also want to keep this signed (unlike PPMI and NPMI)
abs_max_e_pmi = abs(pmax(e_pmi, `e_pmi.+1`, `e_pmi.-1`, na.rm=TRUE)),
abs_min_e_pmi = abs(pmin(e_pmi, `e_pmi.+1`, `e_pmi.-1`, na.rm=TRUE)),
e_pmi = if_else(abs_max_e_pmi > abs_min_e_pmi, abs_max_e_pmi, -1 * abs_min_e_pmi),
e_ppmi = pmax(e_ppmi, `e_ppmi.+1`, `e_ppmi.-1`, na.rm=TRUE),
e_npmi = pmax(e_npmi, `e_npmi.+1`, `e_npmi.-1`, na.rm=TRUE),
) %>%
dplyr::select(cols2keep)
ucl_df = rbind(ucl_0_df, ucl_w1_mean_df)
ucl_df = rbind(ucl_df, ucl_w1_max_df) %>%
arrange(text_id, sent_id, trigger_idx, target_idx)
ucl_df
ucl_df %>%
filter(model == "BERT-allRC", window == "w0")
ucl_agg_regressions
dundee_df
table(dundee_df$text_id) %>% filter(model == "BERT-allRC")
dundee_df
dundee_df %>% filter(model == "BERT-allRC")
dundee_agg_regressions
dundee_agg_regressions %>% filter(n_regressions > 1)
ucl_agg_regressions %>% filter(n_regressions > 1)
ucl_df %>%
filter(model == "BERT-allRC", window == "w0")
print(2942 / 27188)
provo_agg_regressions %>% filter(n_regressions > 1)
provo_df %>%
filter(model == "BERT-allRC", window == "w0")
3720 / 30300
