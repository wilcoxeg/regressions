geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "black") +
ylab("Coefficient Estimate (ms/bit)") +
facet_grid(predictor~lang, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
ggsave("./images/coeffs.pdf", width = 10, height = 5)
#ggsave("./images/coeffs_scaled.pdf", width = 10, height = 5)
# Merge the dataframes
dll_ent_plotting_df = rbind(dll_xlang_ent_df, dll_agg_ent_df)
dll_ent_plotting_df %>%
filter(model %in% c("mgpt_lc", "monot_all")) %>%
rename(target = comp) %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
mutate(model = if_else(model == "mgpt_lc", "mGPT", "monoT (all)")) %>%
mutate(target = if_else(target == "add", "Add Entropy", "Replace Surprisal w/ Entropy")) %>%
ggplot(aes(x = psychometric, y = mean, color = psychometric, shape = target, alpha=target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6) ) +
geom_text(aes(y = if_else(target == "Add Entropy", 0.03, -0.067), label = sig), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("Delta Log Liklihood (average per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c("FF", "GD", "TF")) +
scale_alpha_discrete(range = c(1, 0.6)) +
#scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
axis.text.x = element_text(size = 7),
legend.title = element_blank()
#panel.border = element_rect(color = "grey", fill =  NA, size = 0.5)
)
ggsave("./images/dll_ent.pdf", device="pdf", width = 8.5, height = 4)
# Merge the dataframes
dll_ent_plotting_df = rbind(dll_xlang_ent_df, dll_agg_ent_df)
dll_ent_plotting_df %>%
filter(model %in% c("mgpt_lc", "monot_all")) %>%
rename(target = comp) %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
mutate(model = if_else(model == "mgpt_lc", "mGPT", "monoT (all)")) %>%
mutate(target = if_else(target == "add", "Add Entropy", "Replace Surprisal w/ Entropy")) %>%
ggplot(aes(x = psychometric, y = mean, color = psychometric, shape = target, alpha=target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6) ) +
geom_text(aes(y = if_else(target == "Add Entropy", 0.03, -0.067), label = sig), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("Delta Log Likelihood (average per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c("FF", "GD", "TF")) +
scale_alpha_discrete(range = c(1, 0.6)) +
#scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
axis.text.x = element_text(size = 7),
legend.title = element_blank()
#panel.border = element_rect(color = "grey", fill =  NA, size = 0.5)
)
ggsave("./images/dll_ent.pdf", device="pdf", width = 8.5, height = 4)
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
library(jmuOutlier) # For paired permutation tests
options(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin/")
library(jglmm)
jglmm_setup()
theme_set(theme_bw())
options(digits=4)
options(dplyr.summarise.inform = FALSE)
set.seed(444)
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
models = c("mgpt_sc", "mgpt_lc", "monot_30m", "monot_all")
comps = c("target", "baseline")
psychometric = "gaze_rt" # We're only gonna look at one psychometric here
model_cross_val = function(form, df, d_var, num_folds=10){
folds <- cut(seq(1,nrow(df)),breaks=num_folds,labels=FALSE)
estimates <- c()
models <- c()
for(i in 1:num_folds){
testIndexes = which(folds==i,arr.ind=TRUE)
testData = df[testIndexes,]
trainData = df[-testIndexes,]
if(grepl("bs = 'cr'", form, fixed=TRUE)) {
model = gam(as.formula(form), data = trainData)
} else {
model = lm(as.formula(form), data = trainData)
}
stdev = sigma(model)
densities <- log(dnorm(testData[[d_var]],
mean=predict(model, newdata=testData),
sd=stdev))
estimates <- c(estimates, densities)
}
return(estimates)
}
regression_names = c("linear_baseline", "linear_target", "nonlinear_baseline", "nonlinear_target")
dll_raw_df = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
for(m in models){
df = read.csv(paste0("../data/merged_data/", lang, ".csv"))%>%
filter(model == m)
regression_forms = c(
# Linear Models
#paste0(psychometric, " ~ freq + prev_freq + len + prev_len"),
paste0(psychometric, " ~ te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr')"),
paste0(psychometric, "~ surp + prev_surp + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr') "),
# Non-Linear Models
paste0(psychometric, " ~ te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr')"),
paste0(psychometric, "~ s(surp, bs = 'cr', k = 6) + s(prev_surp, bs = 'cr', k = 6) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr') ")
)
loglik_df = data.frame(names=regression_names, forms=regression_forms) %>%
mutate(logliks = map(regression_forms, model_cross_val, df=df, d_var=psychometric )) %>%
dplyr::select(-forms)
loglik_df = loglik_df %>% unnest(cols = c(logliks)) %>% mutate(lang = lang, psychometric = psychometric, model = m)
dll_raw_df = rbind(dll_raw_df, loglik_df)
}
}
dll_stats_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = target_df_linear$logliks - baseline_df_linear$logliks
dll_stats_df = rbind(dll_stats_df, data.frame(dll = dll_linear, linear="linear", model = m, lang = l))
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks
dll_stats_df = rbind(dll_stats_df, data.frame(dll = dll_nonlinear, linear = "non-linear", model = m, lang = l))
}
}
dll_stats_cleaned_df = dll_stats_df %>%
drop_na() %>%
group_by(model, lang) %>%
mutate(m = mean(dll), s = sd(dll))%>%
ungroup() %>%
filter(dll < m + s * 3,
dll > m - s * 3)
dll_stats_cleaned_df %>%
group_by(lang, model) %>%
summarise(
m = mean(dll),
pval = perm.test(dll, num.sim = 500)$p.value) %>%
ungroup()
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = data.frame(dll = target_df_linear$logliks - baseline_df_linear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
filter(dll < m + s * 3, dll > m - s * 3)
dll_linear = dll_linear$dll
#dll_linear = dll_linear[!is.na(dll_linear)]
linear_ttest = perm.test(dll_linear, num.sim = 1)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = data.frame(dll = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
filter(dll < m + s * 3, dll > m - s * 3)
dll_nonlinear = dll_nonlinear$dll
#dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 1)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 500)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(values = c("#6488d6", "#29bc8b")) +
ylab("Delta Log Liklihood (per word)") +
labs(color = "Model Type") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
#scale_color_manual(values = c("#6488d6", "#29bc8b")) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(name="Model Tyle", labels=c("Linear", "Non-linear"), values = c("#6488d6", "#29bc8b")) +
scale_shape_manual(name="Model Tyle", labels=c("Linear", "Non-linear")) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(name="Model Tyle", labels=c("Linear", "Non-linear"), values = c("#6488d6", "#29bc8b")) +
scale_shape_manual(name="Model Tyle", labels=c("Linear", "Non-linear"), values = c("circle", "triangle")) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c("#6488d6", "#29bc8b")) +
scale_shape_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c(19, 17)) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c("#6488d6", "#29bc8b")) +
scale_shape_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c(19, 17)) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
#scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c("#6488d6", "#29bc8b")) +
scale_shape_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c(19, 17)) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
#scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
# Merge the dataframes
dll_ent_plotting_df = rbind(dll_xlang_ent_df, dll_agg_ent_df)
dll_ent_plotting_df %>%
filter(model %in% c("mgpt_lc", "monot_all")) %>%
rename(target = comp) %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
mutate(model = if_else(model == "mgpt_lc", "mGPT", "monoT (all)")) %>%
mutate(target = if_else(target == "add", "Add Entropy", "Replace Surprisal w/ Entropy")) %>%
ggplot(aes(x = psychometric, y = mean, color = psychometric, shape = target, alpha=target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6) ) +
geom_text(aes(y = if_else(target == "Add Entropy", 0.03, -0.067), label = sig), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("Delta Log Likelihood (average per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c("FF", "GD", "TF")) +
scale_alpha_discrete(range = c(1, 0.6)) +
#scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
axis.text.x = element_text(size = 7),
legend.title = element_blank()
#panel.border = element_rect(color = "grey", fill =  NA, size = 0.5)
)
ggsave("./images/dll_ent.pdf", device="pdf", width = 8.5, height = 4)
# Merge the dataframes
dll_ent_plotting_df = rbind(dll_xlang_ent_df, dll_agg_ent_df)
dll_ent_plotting_df %>%
filter(model %in% c("mgpt_lc", "monot_all")) %>%
rename(target = comp) %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
mutate(model = if_else(model == "mgpt_lc", "mGPT", "monoT (all)")) %>%
mutate(target = if_else(target == "add", "Add Entropy", "Replace Surprisal w/ Entropy")) %>%
ggplot(aes(x = psychometric, y = mean, color = psychometric, shape = target, alpha=target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6) ) +
geom_text(aes(y = if_else(target == "Add Entropy", 0.03, -0.067), label = sig), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("Delta Log Likelihood (average per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c("FF", "GD", "TF")) +
scale_alpha_discrete(range = c(1, 0.6)) +
guides(shape = guide_legend(override.aes = list(alpha = 0.2))) +
#scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
axis.text.x = element_text(size = 7),
legend.title = element_blank()
#panel.border = element_rect(color = "grey", fill =  NA, size = 0.5)
)
ggsave("./images/dll_ent.pdf", device="pdf", width = 8.5, height = 4)
# Merge the dataframes
dll_ent_plotting_df = rbind(dll_xlang_ent_df, dll_agg_ent_df)
dll_ent_plotting_df %>%
filter(model %in% c("mgpt_lc", "monot_all")) %>%
rename(target = comp) %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
mutate(model = if_else(model == "mgpt_lc", "mGPT", "monoT (all)")) %>%
mutate(target = if_else(target == "add", "Add Entropy", "Replace Surprisal w/ Entropy")) %>%
ggplot(aes(x = psychometric, y = mean, color = psychometric, shape = target, alpha=target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6) ) +
geom_text(aes(y = if_else(target == "Add Entropy", 0.03, -0.067), label = sig), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("Delta Log Likelihood (average per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c("FF", "GD", "TF")) +
scale_alpha_discrete(range = c(1, 0.6)) +
guides(shape = guide_legend(override.aes = list(alpha = if_else(taret == "Add Entropy", 0.2, 1)))) +
#scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
axis.text.x = element_text(size = 7),
legend.title = element_blank()
#panel.border = element_rect(color = "grey", fill =  NA, size = 0.5)
)
# Merge the dataframes
dll_ent_plotting_df = rbind(dll_xlang_ent_df, dll_agg_ent_df)
dll_ent_plotting_df %>%
filter(model %in% c("mgpt_lc", "monot_all")) %>%
rename(target = comp) %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
mutate(model = if_else(model == "mgpt_lc", "mGPT", "monoT (all)")) %>%
mutate(target = if_else(target == "add", "Add Entropy", "Replace Surprisal w/ Entropy")) %>%
ggplot(aes(x = psychometric, y = mean, color = psychometric, shape = target, alpha=target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6) ) +
geom_text(aes(y = if_else(target == "Add Entropy", 0.03, -0.067), label = sig), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("Delta Log Likelihood (average per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c("FF", "GD", "TF")) +
scale_alpha_discrete(range = c(1, 0.6)) +
guides(shape = guide_legend(override.aes = list(alpha = if_else(target == "Add Entropy", 0.2, 1)))) +
#scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
axis.text.x = element_text(size = 7),
legend.title = element_blank()
#panel.border = element_rect(color = "grey", fill =  NA, size = 0.5)
)
# Merge the dataframes
dll_ent_plotting_df = rbind(dll_xlang_ent_df, dll_agg_ent_df)
dll_ent_plotting_df %>%
filter(model %in% c("mgpt_lc", "monot_all")) %>%
rename(target = comp) %>%
mutate(sig = case_when( ttest_pval >= 0.05 ~ " ",
ttest_pval < 0.05 & ttest_pval >= 0.01  ~ "*",
ttest_pval < 0.01 & ttest_pval >= 0.001  ~ "**",
ttest_pval < 0.001  ~ "***")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
mutate(model = if_else(model == "mgpt_lc", "mGPT", "monoT (all)")) %>%
mutate(target = if_else(target == "add", "Add Entropy", "Replace Surprisal w/ Entropy")) %>%
ggplot(aes(x = psychometric, y = mean, color = psychometric, shape = target, alpha=target)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6) ) +
geom_text(aes(y = if_else(target == "Add Entropy", 0.03, -0.067), label = sig), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("Delta Log Likelihood (average per word)") +
xlab("") +
facet_grid(model~lang) +
scale_x_discrete(labels = c("FF", "GD", "TF")) +
scale_alpha_discrete(range = c(1, 0.5)) +
#scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
axis.text.x = element_text(size = 7),
legend.title = element_blank()
#panel.border = element_rect(color = "grey", fill =  NA, size = 0.5)
)
ggsave("./images/dll_ent.pdf", device="pdf", width = 8.5, height = 4)
